/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SelectObject.java
 *
 * Created on 24-apr-2009, 19.38.25
 */
package org.easyway.ueditor2;

import org.easyway.ueditor2.system.ObjectList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.easyway.interfaces.sprites.IPlain2D;
import org.easyway.objects.BaseObject;
import org.easyway.objects.Camera;
import org.easyway.objects.sprites2D.SimpleSprite;
import org.easyway.system.StaticRef;

/**
 *
 * @author Daniele
 */
public class SelectObjectDialog extends javax.swing.JDialog {

    DefaultListModel listModel = new DefaultListModel();

    /** Creates new form SelectObject */
    public SelectObjectDialog() {
        super(EditorCore.getMainFrame(), true);
        initComponents();
        objectsList.setModel(listModel);
        init();
    }

    protected void init() {
        ObjectList objList = EditorCore.getObjectList();
        Vector<Object> list = objList.getObjects();
        for (Object obj : list) {
            listModel.addElement(obj);
        }
    }

    protected void selectObject(Object obj) {

        if (obj == null) {
            //selectButton.setEnabled(false);
            centerCameraButton.setEnabled(false);
            destroyButton.setEnabled(false);
            cloneButton.setEnabled(false);
            //cloneButton.setEnabled(false);
            return;
        }
        //selectButton.setEnabled(true);
        //cloneButton.setEnabled(false);
        cloneButton.setEnabled(true);
        destroyButton.setEnabled(obj instanceof BaseObject);
        centerCameraButton.setEnabled(obj instanceof IPlain2D);
        EditorCore.getInstance().setSelected(obj);
    }

    protected void centerOn(IPlain2D plain) {
        if (plain == null) {
            return;
        }
        final Camera camera = StaticRef.getCamera();
        // remember:
        // (value + 1 >> 1) == (value / 2)
        camera.setx(plain.getX() + (plain.getWidth() + 1 >> 1) - (camera.getWidth() + 1 >> 1));
        camera.sety(plain.getY() + (plain.getHeight() + 1 >> 1) - (camera.getHeight() + 1 >> 1));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        objectsList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        filter = new javax.swing.JTextField();
        baseObjRadioButton = new javax.swing.JRadioButton();
        plain2dRadioButton = new javax.swing.JRadioButton();
        spriteRadioButton = new javax.swing.JRadioButton();
        showAllRadioButton = new javax.swing.JRadioButton();
        applyFilter = new javax.swing.JButton();
        classTypeRadioButton = new javax.swing.JRadioButton();
        loopableRadioButton = new javax.swing.JRadioButton();
        centerCameraButton = new javax.swing.JButton();
        destroyButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        cloneButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selector Window");

        jLabel1.setText("Objects List");

        objectsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                objectsListMouseClicked(evt);
            }
        });
        objectsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                objectsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(objectsList);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        jLabel2.setText("Name Filter:");

        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });

        buttonGroup1.add(baseObjRadioButton);
        baseObjRadioButton.setText("Extends BaseObject");

        buttonGroup1.add(plain2dRadioButton);
        plain2dRadioButton.setText("Extends IPlain2D");

        buttonGroup1.add(spriteRadioButton);
        spriteRadioButton.setText("Extends ISprite");

        buttonGroup1.add(showAllRadioButton);
        showAllRadioButton.setSelected(true);
        showAllRadioButton.setText("Show All");

        applyFilter.setText("Apply");
        applyFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFilterActionPerformed(evt);
            }
        });

        classTypeRadioButton.setText("Name Filter is classType");

        buttonGroup1.add(loopableRadioButton);
        loopableRadioButton.setText("Extends ILoopable");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(classTypeRadioButton))
                    .addComponent(loopableRadioButton)
                    .addComponent(spriteRadioButton)
                    .addComponent(showAllRadioButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(plain2dRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                        .addComponent(applyFilter))
                    .addComponent(baseObjRadioButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filter, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAllRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(baseObjRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applyFilter)
                    .addComponent(plain2dRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spriteRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loopableRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classTypeRadioButton)
                .addContainerGap())
        );

        centerCameraButton.setText("Center Camera");
        centerCameraButton.setEnabled(false);
        centerCameraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerCameraButtonActionPerformed(evt);
            }
        });

        destroyButton.setText("Destroy Object");
        destroyButton.setEnabled(false);
        destroyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destroyButtonActionPerformed(evt);
            }
        });

        jButton5.setText("OK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        cloneButton.setText("Clone Object");
        cloneButton.setEnabled(false);
        cloneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cloneButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton5))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cloneButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(centerCameraButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(destroyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(centerCameraButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(destroyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cloneButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void applyFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFilterActionPerformed
        listModel.clear();
        Vector finallist = new Vector();
        if (showAllRadioButton.isSelected()) {
            ObjectList objList = EditorCore.getObjectList();
            objList.completeScan();
            Vector<Object> list = objList.getObjects();
            if (filter.getText().length() == 0) { // add alls
                for (Object obj : list) {
                    finallist.add(obj);
                }
            } else {
                if (!classTypeRadioButton.isSelected()) {
                    for (Object obj : list) {
                        //listModel.addElement(obj);
                        if (obj.toString().toUpperCase().contains(filter.getText().toUpperCase())) {
                            finallist.add(obj);
                        }
                    }
                } else {
                    try {
                        Class<?> clazz = Class.forName(filter.getText());
                        for (Object obj : list) {
                            try {
                                clazz.cast(obj); // if success..
                                finallist.add(obj); // ..add to list :)
                            } catch (ClassCastException exc) {
                                // not success to casting the object
                            }
                        }
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "Wrong class filter\nexample of correct class filter: " +
                                "org.easyway.objects.sprites2D.Sprite", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    //Logger.getLogger(SelectObject.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else if (baseObjRadioButton.isSelected()) {
            ObjectList objList = EditorCore.getObjectList();
            objList.completeScan();
            Vector<BaseObject> list = objList.getBaseObjects();
            for (BaseObject obj : list) {
                //listModel.addElement(obj);
                if (filter.getText().length() == 0 || obj.toString().toUpperCase().contains(filter.getText().toUpperCase())) {
                    finallist.add(obj);
                }

            }
        } else if (plain2dRadioButton.isSelected()) {
            ObjectList objList = EditorCore.getObjectList();
            objList.completeScan();
            Vector<IPlain2D> list = objList.getIPlain2D();
            for (IPlain2D obj : list) {
                //listModel.addElement(obj);
                if (filter.getText().length() == 0 || obj.toString().toUpperCase().contains(filter.getText().toUpperCase())) {
                    finallist.add(obj);
                }

            }
        } else if (spriteRadioButton.isSelected()) {
            ObjectList objList = EditorCore.getObjectList();
            objList.completeScan();
            Vector<SimpleSprite> list = objList.getSprite();
            for (SimpleSprite obj : list) {
                //listModel.addElement(obj);
                if (filter.getText().length() == 0 || obj.toString().toUpperCase().contains(filter.getText().toUpperCase())) {
                    finallist.add(obj);
                }

            }
        } else if (loopableRadioButton.isSelected()) {
            ObjectList objList = EditorCore.getObjectList();
            //objList.completeScan();
            objList.scanLoopList();
            Vector<SimpleSprite> list = objList.getSprite();
            for (SimpleSprite obj : list) {
                //listModel.addElement(obj);
                if (filter.getText().length() == 0 || obj.toString().toUpperCase().contains(filter.getText().toUpperCase())) {
                    finallist.add(obj);
                }

            }
        }
        for (Object obj : finallist) {
            listModel.addElement(obj);
        }

    }//GEN-LAST:event_applyFilterActionPerformed

    private void objectsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_objectsListValueChanged

        selectObject(objectsList.getSelectedValue());

    }//GEN-LAST:event_objectsListValueChanged

    private void centerCameraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerCameraButtonActionPerformed
        Object obj = objectsList.getSelectedValue();
        if (obj instanceof IPlain2D) {
            centerOn((IPlain2D) obj);
        }
//EditorCore.getMainFrame().getBeanEditor().setBean(obj);
    }//GEN-LAST:event_centerCameraButtonActionPerformed

    private void destroyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destroyButtonActionPerformed
        Object obj = objectsList.getSelectedValue();
        //EditorCore.getMainFrame().getBeanEditor().setBean(obj);
        if (obj instanceof BaseObject) {
            if (obj == Camera.getMainFather()) {
                JOptionPane.showMessageDialog(this, "You can't delete the Camera Container", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            BaseObject bo = (BaseObject) obj;
            bo.kill();
            init();

            applyFilterActionPerformed(null);
        }

    }//GEN-LAST:event_destroyButtonActionPerformed

    private void objectsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_objectsListMouseClicked
        if (evt.getClickCount() >= 2) { // double click
            Object obj = objectsList.getSelectedValue();
            if (obj != null) {
                selectObject(obj);
                if (obj instanceof IPlain2D) {
                    centerOn((IPlain2D) obj);
                }

            }
        }
    }//GEN-LAST:event_objectsListMouseClicked

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        applyFilterActionPerformed(evt);
    }//GEN-LAST:event_filterActionPerformed

    private void cloneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cloneButtonActionPerformed
        try {
            Object obj = objectsList.getSelectedValue();
            if (obj == null) {
                return;
            }
            Object clObj = EditorCore.getInstance().cloneObject(obj);

            selectObject(clObj);
            if (clObj instanceof IPlain2D) {
                centerOn((IPlain2D) clObj);
            }

            //ObjectList objList = EditorCore.getObjectList();
            //objList.completeScan();
            if (!listModel.contains(clObj)) {
                listModel.addElement(clObj);
            }
            objectsList.setSelectedValue(clObj, true);
            objectsList.repaint();
        //objectsList.setSelectedValue(clObj, true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "The selected class doesn't contain a copy constructor\n\n" +
                    "Example:\n" +
                    "public class MyObject {" +
                    "\n     public MyObject( MyObject copyInstance ) {\n" +
                    "          ...\n     }\n}",
                    "ERROR", JOptionPane.WARNING_MESSAGE);
        //Logger.getLogger(SelectObject.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cloneButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyFilter;
    private javax.swing.JRadioButton baseObjRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton centerCameraButton;
    private javax.swing.JRadioButton classTypeRadioButton;
    private javax.swing.JButton cloneButton;
    private javax.swing.JButton destroyButton;
    private javax.swing.JTextField filter;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton loopableRadioButton;
    private javax.swing.JList objectsList;
    private javax.swing.JRadioButton plain2dRadioButton;
    private javax.swing.JRadioButton showAllRadioButton;
    private javax.swing.JRadioButton spriteRadioButton;
    // End of variables declaration//GEN-END:variables
}
